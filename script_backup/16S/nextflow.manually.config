// Global default params, used in configs
// List of parameters that can be passed to this workflow
params{

  container = 'kentchendocker/g16s_pipeline:latest'

  outdir = "OUTPUT"

  read_length     = 150
  // thread       = 32

  // For Join_fastq, FLASH
  phred_offset    = 33
  quality         = 19
  min_overlap     = 10
  max_overlap     = 65
  mismatch_ratio  = 0.25

  sequence_depth  = 110
  num_permutations = 999
  // silva reference
  chimeras_ref                 = '/references/gold.fa'
  otu_ref_path                 = '/references/gg_13_8_otus'
  otu_ref_tree                 = '$params.otu_ref_path/trees/97_otus.tree'
  mothur_otu_ref_path          = '/references/gg_13_8_99'
  mothur_otu_ref_map           = '$params.otu_ref_path/otus/99_otu_map.txt'
  mothur_otu_ref_fasta         = '$params.mothur_otu_ref_path/gg_13_8_99.fasta'
  mothur_otu_ref_aligned_fasta = '$params.mothur_otu_ref_path/gg_13_8_99.refalign'
  mothur_otu_ref_taxonomy      = '$params.mothur_otu_ref_path/gg_13_8_99.gg.tax'
  silva_ref_path               = '/references/SILVA_132_releas'
  silva_otu_ref_fasta          = '/references/SILVA_132_release/rep_set/rep_set_16S_only/99/silva_132_99_16S.fna'
  silva_otu_ref_aligned_fasta  = '/references/SILVA_132_release/rep_set_aligned/99/99_alignment.fna'
  silva_otu_ref_taxonomy       = '/references/SILVA_132_release/taxonomy/16S_only/99/raw_taxonomy.txt'
  silva_ref_tree               = '/references/SILVA_132_release/trees/99/99_otus.tre'

  // Mothur parameters
  classify_cutoff              = 60



  name = false
  plaintext_email = false
  project = false
  genome = false
  sample_project = ""
  customer = ""
  saveReference = true
  //bwa_index = genome ? genomes[ genome ].bwa ?: false : false
  //params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
  //params.genome_bed12 = params.genome ? params.genomes[ params.genome ].genome_bed12 ?: false : false
  help = false
  email = false
  smtp = true
}

mail {
    smtp.host = 'smtp.gmail.com'
    smtp.port = 587
    smtp.user = 'genomics.system@gmail.com'
    smtp.password = '78ptFxGExUwY'
    smtp.auth = true
    smtp.starttls.enable = true
    smtp.starttls.required = true
}


profiles {
  standard {
    includeConfig 'conf/base.config'
  }
  nchc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/nchc.config'
  } 
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    //Todo need to modify 
    docker.enabled = true
    process.container = "kentchendocker/g16s_pipeline:latest"
    docker.sudo = true
    docker.fixOwnership = true
    docker.remove = true
    docker.runOptions = " --rm -v /mnt/NFS/scratch/ssd_pool:/mnt/NFS/scratch/ssd_pool -v /etc/localtime:/etc/localtime:ro -v /export/EC1680U:/export/EC1680U -v /export/EC2480U:/export/EC2480U -v `pwd`:`pwd` -v /opt/libstdc:/opt/libstdc -w `pwd` -v /export/EC1680U/DataBase/16S:/references "
    docker.tty = false

  }
  none {
    // Don't load any config (for use with custom home configs)
  }
  singularity {
    singularity.enabled = true
    params.container = "$baseDir/singularity/g16s_pipeline-latest.simg"
    singularity.runOptions = "--no-home -B /export:/export -B /mnt/NFS:/mnt/NFS -B `pwd`:`pwd` -B /export/EC1680U/DataBase/16S:/references"
    singularity.autoMounts = false
  }
  standard {
    includeConfig 'conf/base.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  gbc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/gbc.config'
  }
}




// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "timeline.html"
}
report {
  enabled = true
  file = "report.html"
}
trace {
  enabled = true
  file = "trace.txt"
}
dag {
  enabled = true
  file = "dag.svg"
}

manifest {
  name = 'g16S'
  author = 'Daniel Liu'
  homePage = 'http://gitlab.genomics.local:10080/'
  description = '16S Nextflow Version'
  mainScript = '16s.illumina.nf'
  nextflowVersion = '>=0.32.0' //Minimum required Nextflow version.
  version = '1.0.1' //Project version number.
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

